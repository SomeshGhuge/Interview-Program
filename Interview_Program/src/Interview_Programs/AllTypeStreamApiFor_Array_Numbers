package pakage;

import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.stream.IntStream;


public class AllTypeStreamApiFor_Array_Numbers {

	public static void main (String [] args) {
	
		List<Integer> al = Arrays.asList(1,3,5,9);
		List<Integer> al2 =Arrays.asList(1,2,3,11,12,13,15,15);
		
		System.out.println("Commom numbers in two Array al & al2 --->"+
		al.stream().distinct().filter(al2::contains).collect(Collectors.toSet()));
		
		System.out.println("Duplicate number in array---> "+
		al2.stream().filter(x-> Collections.frequency(al2, x)>1).collect(Collectors.toSet()));
		
		System.out.println("Minimum Value : "+
		al.stream().min(Integer::compareTo).orElse(Integer.MAX_VALUE));
		
		System.out.println("Maximun Value : "+
		al.stream().max(Integer:: compareTo).orElse(Integer.MIN_VALUE));
		
		System.out.println("All EVEN Numbers greater than 5 are : "+
		al2.stream().filter(x-> x>5).filter(x-> (x%2==0)).collect(Collectors.toSet()));
		
		Collections.sort(al);
		System.out.println("First Largest Number --> "+ 
		al.stream().distinct().skip(al.size()-1).findFirst().orElse(0));
		
		System.out.println("Second Latgest Number from Arrays---> "+
		al.stream().distinct().skip(al.size()-2).findFirst().orElse(0));
		
		intersectionType(al, al2);
		unionType(al, al2);
		missingNumber(al);
		averageNumber(al); 
		evenOddNumber(al);
		listContainOnlyOddNumbers(al);

	}
	
	public static void listContainOnlyOddNumbers(List<Integer>al) {
		
		if(isOddNumbers(al)) {
			System.out.println("This arraylist contains All odd numbers : "+al);
		}else {
			System.out.println("This arraylist contains even numbers also : "+al);
		}
		
	}
	
	public static boolean isOddNumbers(List<Integer> al) {
		return al.stream().allMatch(x-> (x%2) != 0);
	}
	public static void evenOddNumber(List<Integer>number) {
		number.stream().forEach(num->{
			String result = ( num%2 ==0) ? "even" :"odd";
			System.out.println(num +" is "+result);
		});
	}
	public static void missingNumber(List<Integer> al) {
		List<Integer> allNumbers = IntStream.range(0, 10).boxed().collect(Collectors.toList());
		al.forEach(allNumbers::remove);
		
		System.out.println("Your missing number from array is ---> "+allNumbers);
	}
	
	public static void intersectionType(List<Integer> al, List<Integer>al2) {
		Set<Integer> set = new HashSet<Integer>();
		for(int a : al) {
			set.add(a);
		}
		for(int b : al2) {
			set.add(b);
		}
		System.out.println("Your intersections are --> "+set);
		
	}
	
	public static void unionType(List<Integer>al, List<Integer>al2) {
		LinkedList<Integer> ll= new LinkedList<Integer>();
		for(int a :al) {
			ll.add(a);
		}
		for(int b: al2) {
			ll.add(b);
		}
		
		System.out.println("Your Union are ---> "+ll);
	}
	
	 public static void averageNumber(List<Integer> numbers) {
		 
		 double avgValue = numbers.stream().mapToDouble(Integer::doubleValue).average().orElse(0.0);
		 
		 System.out.println("Your average value is : "+ avgValue);
	 }
}
